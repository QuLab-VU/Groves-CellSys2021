install.packages("BiocManager")
# BiocManager::install("sva")
# install.packages("devtools")
# devtools::install_local("/Users/smgroves/Downloads/CytoTRACE-master.zip")
# library(CytoTRACE)
# BiocManager::install("scater")
library(scater)
# install loomR from GitHub using the remotes package
# remotes::install_github(repo ='mojaveazure/loomR', ref = 'develop')
library(loomR)
# install.packages('Seurat')
library(Seurat)
# remotes::install_github("mojaveazure/seurat-disk")
# library(SeuratData)
library(SeuratDisk)
file = "../../out/RPM-time-series/X_magic_for_R.h5ad"
Convert(file, dest = "h5seurat", overwrite = TRUE)
data <- LoadH5Seurat("../../out/RPM-time-series/X_magic_for_R.h5seurat")
Idents(data) = data@meta.data$tumor
# file = "../../out/RPM-time-series/X_magic_for_R.h5ad"
# Convert(file, dest = "h5seurat", overwrite = TRUE)
# data <- LoadH5Seurat("../../out/RPM-time-series/X_magic_for_R.h5seurat")
Idents(data) = data@meta.data$timepoint
ElbowPlot(data) #this plot indicates  the top 8 are important
DimPlot(data, reduction = "pca", label = TRUE)
pct <- data[["pca"]]@stdev / sum(data[["pca"]]@stdev) * 100
# Calculate cumulative percents for each PC
cumu <- cumsum(pct)
# Determine which PC exhibits cumulative percent greater than 90% and % variation associated with the PC is less than 5
co1 <- which(cumu > 90 & pct < 5)[1]
print(co1) #42
# Determine the difference between variation of PC and subsequent PC
co2 <- sort(which((pct[1:length(pct) - 1] - pct[2:length(pct)]) > 0.1), decreasing = T)[1] + 1
# last point where change of % of variation is more than 0.1%.
print(co2) #8
data <- FindNeighbors(data, dims = 1:10)
data <- FindClusters(data, resolution = 0.5)
data <- RunUMAP(data, dims = 1:10)
DimPlot(data, reduction = "umap")
data[["louvain"]] <- Idents(object = data) #store louvain Idents
Idents(object = data) <- data@meta.data$tumor #add cell line labels
data[["louvain"]] <- Idents(object = data) #store louvain Idents
Idents(object = data) <- data@meta.data$timepoint #add cell line labels
DimPlot(data, label = TRUE)
VlnPlot(data, features = c("Ascl1", "Yap1", "Pou2f3", 'Calca','Neurod1', 'Myc'), combine = FALSE)
# install.packages('plotly')
# Load plot_ly
library(plotly)
# Extract tSNE information from Seurat Object
pca_1 <- data[["pca"]]@cell.embeddings[,1]
pca_2 <- data[["pca"]]@cell.embeddings[,2]
pca_3 <- data[["pca"]]@cell.embeddings[,3]
# Visualize what headings are called so that you can extract them to form a dataframe
# Embeddings(object = data, reduction = "pca")
plot.data <- FetchData(object = data, vars = c("PC_1", "PC_2", "PC_3", "timepoint"))
plot.data$label <- paste(rownames(plot.data))
plot_ly(data = plot.data,
x = ~PC_1, y = ~PC_2, z = ~PC_3,
color = ~timepoint,
colors = c("lightseagreen",
"green",
"red",
"orange1",
"royalblue1",
"lightcyan3",
"peachpuff3",
"darkorchid1",
"turquoise",
"darkmagenta"),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, width=2), # controls size of points
text=~label, #This is that extra column we made earlier for which we will use for cell ID
hoverinfo="text") #When you visualize your plotly object, hovering your mouse pointer over a point shows cell names
VizDimLoadings(data, dims = 1:3, reduction = "pca")
save(data, file="../../out/RPM-time-series/ParetoTI/X_magic_for_ParetoTI.Robj")
write.csv(data[["RNA"]]@scale.data, '../../out/RPM-time-series/ParetoTI/integrated-corrected-data.csv')
write.csv(data[['pca']]@cell.embeddings, '../../out/RPM-time-series/ParetoTI/pca_embedding.csv')
write.csv(data[['pca']]@feature.loadings, '../../out/RPM-time-series/ParetoTI/pca_feature_loadings.csv')
data <- ProjectDim(data, reduction = 'pca')
write.csv(data[['pca']]@feature.loadings.projected, '../../out/RPM-time-series/ParetoTI/pca_feature_loadings_projected.csv')
# devtools::install_github(repo = 'hhoeflin/hdf5r')
# devtools::install_github(repo = 'mojaveazure/loomR', ref = 'develop')
# devtools::install_github(repo = 'satijalab/seurat', ref = 'loom')
# library(loomR)
#
# data.loom <- as.loom(data, filename = "X_magic_for_ParetoTI.loom", verbose = FALSE)
library(ParetoTI)
library(cowplot)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(factoextra)
library(ggfortify)
library(cluster)
# install.packages("data.table")
##################################
# load(file="../../out/cell-lines/ParetoTI/X_magic_for_ParetoTI.Robj")
x <- data[["RNA"]]@scale.data
x_pca <- read.csv('../../out/RPM-time-series/ParetoTI/pca_embedding.csv',header = TRUE,row.names = 1)
x_pca <- t(x_pca)
x_pca <- x_pca[1:22,] #keep only top 22 PCs [from above, change < 0.1% in EV]
loadings<- read.csv('../../out/RPM-time-series/ParetoTI/pca_feature_loadings.csv', header = TRUE, row.names = 1)
loadings <- as.matrix(loadings)
x_pca[1:8,]
length(x_pca[1:8,])
arc_ks = k_fit_pch(x_pca, ks = 2:8, check_installed = T,
bootstrap = T, bootstrap_N = 200, maxiter = 1000,
bootstrap_type = "m", seed = 2543,
volume_ratio = "t_ratio", # set to "none" if too slow
delta=0, conv_crit = 1e-04, order_type = "align",
sample_prop = 0.75)
# Show variance explained by a polytope with each k (cumulative)
plot_arc_var(arc_ks, type = "varexpl", point_size = 2, line_size = 1.5) + theme_bw()
plot_arc_var(arc_ks, type = "res_varexpl", point_size = 2, line_size = 1.5) + theme_bw()
plot_arc_var(arc_ks, type = "total_var", point_size = 2, line_size = 1.5) +
theme_bw() +
ylab("Mean variance in position of vertices")
plot_arc_var(arc_ks, type = "t_ratio", point_size = 2, line_size = 1.5) + theme_bw()
arc_ks_8 = k_fit_pch(x_pca[1:8,], ks = 2:8, check_installed = T,
bootstrap = T, bootstrap_N = 200, maxiter = 1000,
bootstrap_type = "m", seed = 2543,
volume_ratio = "t_ratio", # set to "none" if too slow
delta=0, conv_crit = 1e-04, order_type = "align",
sample_prop = 0.75)
# Show variance explained by a polytope with each k (cumulative)
plot_arc_var(arc_ks_8, type = "varexpl", point_size = 2, line_size = 1.5) + theme_bw()
plot_arc_var(arc_ks_8, type = "res_varexpl", point_size = 2, line_size = 1.5) + theme_bw()
plot_arc_var(arc_ks_8, type = "total_var", point_size = 2, line_size = 1.5) +
theme_bw() +
ylab("Mean variance in position of vertices")
plot_arc_var(arc_ks_8, type = "t_ratio", point_size = 2, line_size = 1.5) + theme_bw()
i = 3
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/RPM-time-series/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#
#   k  var_name  var_obs   p_value
# 1: 3   varexpl 0.863903 0.8668669
# 2: 3   t_ratio 0.474215 0.3553554
# 3: 3 total_var       NA       NaN
#    k  var_name   var_obs    p_value
# 1: 4   varexpl 0.8994089 0.01905717
# 2: 4   t_ratio 0.1055783 0.39117352
# 3: 4 total_var        NA        NaN
#    k  var_name   var_obs     p_value
# 1: 5   varexpl 0.9309749 0.001002004
# 2: 5   t_ratio 0.1106568 0.001002004
# 3: 5 total_var        NA         NaN
#    k  var_name    var_obs p_value
# 1: 6   varexpl 0.93537568   0.051
# 2: 6   t_ratio 0.01013312   0.105
# 3: 6 total_var         NA     NaN
pch_rand
i = 4
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/RPM-time-series/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#    k  var_name   var_obs p_value
# 1: 3   varexpl 0.6042200   0.999
# 2: 3   t_ratio 0.3945619   0.992
# 3: 3 total_var        NA     NaN
pch_rand
i = 6
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/RPM-time-series/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#    k  var_name   var_obs p_value
# 1: 3   varexpl 0.6042200   0.999
# 2: 3   t_ratio 0.3945619   0.992
# 3: 3 total_var        NA     NaN
#   k  var_name   var_obs p_value
# 1: 4   varexpl 0.6572579   0.999
# 2: 4   t_ratio 0.1041771   0.840
# 3: 4 total_var        NA     NaN
pch_rand
i = 5
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/RPM-time-series/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#    k  var_name   var_obs p_value
# 1: 3   varexpl 0.6042200   0.999
# 2: 3   t_ratio 0.3945619   0.992
# 3: 3 total_var        NA     NaN
#   k  var_name   var_obs p_value
# 1: 4   varexpl 0.6572579   0.999
# 2: 4   t_ratio 0.1041771   0.840
# 3: 4 total_var        NA     NaN
#    k  var_name    var_obs p_value
# 1: 6   varexpl 0.79005690   0.001
# 2: 6   t_ratio 0.03761536   0.001
# 3: 6 total_var         NA     NaN
pch_rand
i = 7
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/RPM-time-series/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#    k  var_name   var_obs p_value
# 1: 3   varexpl 0.6042200   0.999
# 2: 3   t_ratio 0.3945619   0.992
# 3: 3 total_var        NA     NaN
#   k  var_name   var_obs p_value
# 1: 4   varexpl 0.6572579   0.999
# 2: 4   t_ratio 0.1041771   0.840
# 3: 4 total_var        NA     NaN
#    k  var_name    var_obs p_value
# 1: 5   varexpl 0.73903082   0.001
# 2: 5   t_ratio 0.03676577   0.717
# 3: 5 total_var         NA     NaN
#    k  var_name    var_obs p_value
# 1: 6   varexpl 0.79005690   0.001
# 2: 6   t_ratio 0.03761536   0.001
# 3: 6 total_var         NA     NaN
pch_rand
arc <- fit_pch(x_pca, noc = 6, delta = 0, conv_crit = 1e-04, maxiter = 500)
##################################
# Fit 5 archetypes with bootstrapping for robustness
arc_rob = fit_pch_bootstrap(x_pca, n = 200, sample_prop = .8, seed = 2543, delta = 1, noc = 6)
arc_ave <- average_pch_fits(arc_rob)
save(arc, file="../../out/RPM-time-series/ParetoTI/arc.Robj")
save(arc_rob, file="../../out/RPM-time-series/ParetoTI/arc_rob.Robj")
save(arc_ave, file="../../out/RPM-time-series/ParetoTI/arc_ave.Robj")
write.csv(arc$XC, file="../../out/RPM-time-series/ParetoTI/arc_positions_pca.csv")
write.csv(arc_ave$XC, file="../../out/RPM-time-series/ParetoTI/arc_ave_positions_pca.csv")
reconstruct_from_pca <- function(x, loadings, arc_XC, nComp = 22){
mu = colMeans(t(x)) #mean for each feature (gene)
# Xhat = [r(samples) x c(PCs)] %*% [r(PCs) x c(Features)]
# Xhat = [r(samples) x c(features)]
Xhat = arc_XC[,1:nComp] %*% t(loadings[,1:nComp])
Xhat = scale(Xhat, center = -mu, scale = FALSE)
return(Xhat)}
x_recon <- reconstruct_from_pca(x, loadings, x_pca)
arc_genespace <- reconstruct_from_pca(x = x, loadings = loadings, arc_XC = t(arc_ave$XC))
write.csv(t(arc_genespace), '../../out/RPM-time-series/ParetoTI/arc_gene-space.csv')
##################################
#
# load(file="../int/single-cell/arc.Robj")
# load( file="../int/single-cell/arc_rob.Robj")
# load( file="../int/single-cell/arc_ave.Robj")
Idents(object = data) <- data@meta.data$tumor #add cell line labels
Idents(object = data) <- data@meta.data$timepoint #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/robust_archetypes.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@scale.data['NEUROD2',]),
text_size = 60, data_size = 3)
##################################
#
# load(file="../int/single-cell/arc.Robj")
# load( file="../int/single-cell/arc_rob.Robj")
# load( file="../int/single-cell/arc_ave.Robj")
Idents(object = data) <- data@meta.data$timepoint #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/robust_archetypes.html")
#
# p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
#                  which_dimensions = 1:3, line_size = 1.5,
#                  data_lab = as.numeric(data[['RNA']]@scale.data['NEUROD2',]),
#                  text_size = 60, data_size = 3)
# plotly::layout(p_pca, title = "Expression of NEUROD2 in PCA")
# htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/NEUROD2.HTML")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['YAP1',]),
text_size = 60, data_size = 3)
##################################
#
# load(file="../int/single-cell/arc.Robj")
# load( file="../int/single-cell/arc_rob.Robj")
# load( file="../int/single-cell/arc_ave.Robj")
Idents(object = data) <- data@meta.data$timepoint #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/robust_archetypes.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@scale.data['Neurod1',]),
text_size = 60, data_size = 3)
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@scale.data['Neurod2',]),
text_size = 60, data_size = 3)
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['Yap1',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of YAP1 in PCA")
##################################
#
# load(file="../int/single-cell/arc.Robj")
# load( file="../int/single-cell/arc_rob.Robj")
# load( file="../int/single-cell/arc_ave.Robj")
Idents(object = data) <- data@meta.data$timepoint #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/robust_archetypes.html")
#
# p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
#                  which_dimensions = 1:3, line_size = 1.5,
#                  data_lab = as.numeric(data[['RNA']]@scale.data['Neurod2',]),
#                  text_size = 60, data_size = 3)
# plotly::layout(p_pca, title = "Expression of NEUROD2 in PCA")
# htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/NEUROD2.HTML")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['Yap1',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of YAP1 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/YAP1.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['Pou2f3',]),
text_size = 60, data_size = 3)
##################################
#
# load(file="../int/single-cell/arc.Robj")
# load( file="../int/single-cell/arc_rob.Robj")
# load( file="../int/single-cell/arc_ave.Robj")
Idents(object = data) <- data@meta.data$timepoint #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/robust_archetypes.html")
#
# p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
#                  which_dimensions = 1:3, line_size = 1.5,
#                  data_lab = as.numeric(data[['RNA']]@scale.data['Neurod2',]),
#                  text_size = 60, data_size = 3)
# plotly::layout(p_pca, title = "Expression of NEUROD2 in PCA")
# htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/NEUROD2.HTML")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['Yap1',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of YAP1 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/YAP1.html")
#
# p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
#                  which_dimensions = 1:3, line_size = 1.5,
#                  data_lab = as.numeric(data[['RNA']]@data['Pou2f3',]),
#                  text_size = 60, data_size = 3)
# plotly::layout(p_pca, title = "Expression of POU2F3 in PCA")
# htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/POU2F3.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['Ascl1',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of ASCL1 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/ASCL1.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['Myc',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of MYC in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/RPM-time-series/MYC.html")
arc_ave$S
arc$S
library(matrixStats)
# x.orig <- as.matrix(data[['RNA']]@data)
#
# rownames(x.orig)<-gsub("-", ".", rownames(x.orig))
#
#
#
# ix <- which(rownames(x.orig) %in%c('1.Sep','10.Sep','11.Mar','11.Sep','2.Sep','3.Mar','3.Sep','4.Mar','4.Sep','5.Sep', '5.Mar','6.Sep','6.Mar','7.Sep','7.Mar','8.Sep','8.Mar','9.Sep','9.Mar','RP11-206L10.1'))
# ix <- which(rownames(x.orig) %in% c('7SK.1'))
# clean <- x.orig[-ix, ]
#
#
# activ_pi = measure_activity(as.matrix(data[['RNA']]@scale.data), activity_method = 'pseudoinverse',# row names are assumed to be gene identifiers,
#                          which = 'BP', return_as_matrix = F,
#                          taxonomy_id = 9606, keytype = "ALIAS", #9606 is PDX, 10090 is mouse.
#                          lower = 10, upper = 1000)
#                          # aucell_options =list(aucMaxRank =
#                           # nrow(as.matrix(x.orig)) * 0.05, binary = F, nCores = 3, plotStats = TRUE))
# save(activ_pi, file="../../out/cell-lines/ParetoTI/activ_pi.Robj")
# activ_pi <- within(activ_pi, rm('2__deoxyribonucleotide_biosynthetic_process','2__deoxyribonucleotide_metabolic_process','2_oxoglutarate_metabolic_process','3__phosphoadenosine_5__phosphosulfate_metabolic_process',
# '3__UTR_mediated_mRNA_destabilization',
# '3__UTR_mediated_mRNA_stabilization',
# '7_methylguanosine_mRNA_capping',
# '7_methylguanosine_RNA_capping',
# '4_hydroxyproline_metabolic_process'))
#
# activ_pi <- within(activ_pi, rm(`_de_novo__posttranslational_protein_folding`,
# `_de_novo__protein_folding`,
# `poly_A_+_mRNA_export_from_nucleus`))
data_attr = merge_arch_dist(arc_data = arc_ave, data = x_pca,
feature_data = as.matrix(data[['RNA']]@scale.data),
# colData = activ_pi,
dist_metric = c("euclidean", "arch_weights")[1],
colData_id = "cells", rank = F)
save(data_attr, file="../../out/RPM-time-series/ParetoTI/data_attr.Robj")
data_attr['sample_id']
data_attr['sample_id',:]
data_attr['sample_id',]
data_attr$data['sample_id',]
data_attr$data[,'sample_id']
distances = data_attr$data[,c('sample_id','archetype_1','archetype_2','archetype_3','archetype_4','archetype_5','archetype_6')]
write.csv(distances, '../../out/RPM-time-series/ParetoTI/distances.csv')
write.csv(arc$S, '../../out/RPM-time-series/ParetoTI/S.csv')
