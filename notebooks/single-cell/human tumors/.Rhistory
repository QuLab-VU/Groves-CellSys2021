# install.packages('reticulate')
reticulate::use_condaenv("reticulate_PCHA", conda = "auto",
required = TRUE) # set TRUE to force R to use reticulate_PCHA
reticulate::py_discover_config("py_pcha")
# install.packages("BiocManager")
# BiocManager::install("vitkl/ParetoTI", dependencies = c("Depends", "Imports", "LinkingTo"))
library(cowplot)
library(ParetoTI)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(factoextra)
library(ggfortify)
library(cluster)
set.seed(4355)
data <- '../data/CCLE_Minna_Thomas_COMBAT_vargenes.csv'
x <- read.csv(data, header = TRUE, sep = ',', row.names = 1)
drops <- c("t.S02353","t.S02297") #these are the two chromothripsis cases that are very different from the rest of the data points
x <- x[,!(names(x) %in% drops)]
cm <- x[,!grepl("^t",colnames(x))]
t <- x[,!grepl("^[cm]",colnames(x))]
t <- expm1(t)
tt <- transpose(t)
rownames(tt) <- colnames(t)
colnames(tt) <- rownames(t)
x <- cm
x<- expm1(x)
xt <- transpose(x)
rownames(xt) <- colnames(x)
colnames(xt) <- rownames(x)
data_labels <-'../data/combined_clusters.csv'
labels <- read.csv(data_labels, header = TRUE, sep = ',', row.names = 1)
labels_cm <- labels[row.names(xt),]
labels_t <- labels[row.names(tt),]
pca <- prcomp(xt, center=TRUE, scale = TRUE)
# eig.val <- get_eigenvalue(pca)
# res.var <- get_pca_var(pca)
# res.var$contrib        # Contributions to the PCs
res.ind <- get_pca_ind(pca)
par(bg = "white")
# autoplot(pca) + theme_bw()
autoplot(pca, data = labels_cm, colour = 'phenotype') +theme_bw()
options(repr.plot.width = 15, repr.plot.height = 6, repr.plot.res = 100)
fviz_eig(pca, ncp = 30, addlabels = TRUE)
options(repr.plot.width = 10, repr.plot.height = 10, repr.plot.res = 100)
fviz_pca_var(pca, select.var = list(contrib = 20))
fviz_pca_ind(pca, col.ind="cos2")
pred <- predict(pca, newdata=tt)
expl.var <- round(pca$sdev^2/sum(pca$sdev^2)*100) # percent explained variance
###Plot result
pc = c(1,2)
COLOR <- c(1:6)
PCH <- c(1,16)
# png("pca_pred.png", units="in", width=5, height=4, res=200)
op <- par(mar=c(4,4,1,1), ps=10)
plot(pca$x[,pc], col=COLOR[labels_cm$phenotype], cex=PCH[1],
xlab=paste0("PC ", pc[1], " (", expl.var[pc[1]], "%)"),
ylab=paste0("PC ", pc[2], " (", expl.var[pc[2]], "%)")
)
points(pred[,pc], col=COLOR[labels_t$phenotype], cex=PCH[2])
legend("topright", legend=levels(labels$phenotype), fill = COLOR, border=COLOR)
legend("topleft", legend=c("training data", "validation data"), col=1, pch=PCH)
par(op)
# dev.off()
x_pca <- t(pca$x)
x_pca <- x_pca[1:10,]
t_pca <- t(pred)[1:10,]
# data <- '../data/CCLE_Minna_Thomas_COMBAT_vargenes.csv'
data <- '/Users/smgroves/Dropbox (VU Basic Sciences)/SCLC_data/RNAseq/gdsc_minna_ccle/SCLC_combined_Minna_CCLE_batch_corrected_vargenes-no-NKX2.csv'
x <- read.csv(data, header = TRUE, sep = ',', row.names = 1)
drops <- c("t.S02353","t.S02297") #these are the two chromothripsis cases that are very different from the rest of the data points
x <- x[,!(names(x) %in% drops)]
cm <- x[,!grepl("^t",colnames(x))]
t <- x[,!grepl("^[cm]",colnames(x))]
t <- expm1(t)
tt <- transpose(t)
# data <- '../data/CCLE_Minna_Thomas_COMBAT_vargenes.csv'
data <- '/Users/smgroves/Dropbox (VU Basic Sciences)/SCLC_data/RNAseq/gdsc_minna_ccle/SCLC_combined_Minna_CCLE_batch_corrected_vargenes-no-NKX2.csv'
x <- read.csv(data, header = TRUE, sep = ',', row.names = 1)
drops <- c("t.S02353","t.S02297") #these are the two chromothripsis cases that are very different from the rest of the data points
x <- x[,!(names(x) %in% drops)]
#
# cm <- x[,!grepl("^t",colnames(x))]
# t <- x[,!grepl("^[cm]",colnames(x))]
# t <- expm1(t)
# tt <- transpose(t)
# rownames(tt) <- colnames(t)
# colnames(tt) <- rownames(t)
#
# x <- cm
# x<- expm1(x)
xt <- transpose(x)
rownames(xt) <- colnames(x)
colnames(xt) <- rownames(x)
data_labels <-'/Users/smgroves/Dropbox (VU Basic Sciences)/SCLC_data/RNAseq/gdsc_minna_ccle/6_classes/new_clusters.csv'
# data_labels <-'../data/combined_clusters.csv'
labels <- read.csv(data_labels, header = TRUE, sep = ',', row.names = 1)
labels_cm <- labels[row.names(xt),]
labels_t <- labels[row.names(tt),]
pca <- prcomp(xt, center=TRUE, scale = TRUE)
# eig.val <- get_eigenvalue(pca)
# res.var <- get_pca_var(pca)
# res.var$contrib        # Contributions to the PCs
res.ind <- get_pca_ind(pca)
par(bg = "white")
# autoplot(pca) + theme_bw()
autoplot(pca, data = labels, colour = 'phenotype') +theme_bw()
# data <- '../data/CCLE_Minna_Thomas_COMBAT_vargenes.csv'
data <- '/Users/smgroves/Dropbox (VU Basic Sciences)/SCLC_data/RNAseq/gdsc_minna_ccle/SCLC_combined_Minna_CCLE_batch_corrected_vargenes-no-NKX2.csv'
x <- read.csv(data, header = TRUE, sep = ',', row.names = 1)
drops <- c("t.S02353","t.S02297") #these are the two chromothripsis cases that are very different from the rest of the data points
x <- x[,!(names(x) %in% drops)]
#
# cm <- x[,!grepl("^t",colnames(x))]
# t <- x[,!grepl("^[cm]",colnames(x))]
# t <- expm1(t)
# tt <- transpose(t)
# rownames(tt) <- colnames(t)
# colnames(tt) <- rownames(t)
#
# x <- cm
# x<- expm1(x)
xt <- transpose(x)
rownames(xt) <- colnames(x)
colnames(xt) <- rownames(x)
data_labels <-'/Users/smgroves/Dropbox (VU Basic Sciences)/SCLC_data/RNAseq/gdsc_minna_ccle/6_classes/new_clusters.csv'
# data_labels <-'../data/combined_clusters.csv'
labels <- read.csv(data_labels, header = TRUE, sep = ',', row.names = 1)
labels <- labels[row.names(xt),]
labels_cm <- labels[row.names(xt),]
labels_t <- labels[row.names(tt),]
pca <- prcomp(xt, center=TRUE, scale = TRUE)
# eig.val <- get_eigenvalue(pca)
# res.var <- get_pca_var(pca)
# res.var$contrib        # Contributions to the PCs
res.ind <- get_pca_ind(pca)
par(bg = "white")
# autoplot(pca) + theme_bw()
autoplot(pca, data = labels, colour = 'phenotype') +theme_bw()
options(repr.plot.width = 15, repr.plot.height = 6, repr.plot.res = 100)
fviz_eig(pca, ncp = 30, addlabels = TRUE)
options(repr.plot.width = 10, repr.plot.height = 10, repr.plot.res = 100)
fviz_pca_var(pca, select.var = list(contrib = 20))
fviz_pca_ind(pca, col.ind="cos2")
pred <- predict(pca, newdata=tt)
pca <- prcomp(xt, center=TRUE, scale = TRUE)
# eig.val <- get_eigenvalue(pca)
# res.var <- get_pca_var(pca)
# res.var$contrib        # Contributions to the PCs
res.ind <- get_pca_ind(pca)
par(bg = "white")
# autoplot(pca) + theme_bw()
autoplot(pca, data = labels, colour = 'phenotype') +theme_bw()
options(repr.plot.width = 15, repr.plot.height = 6, repr.plot.res = 100)
fviz_eig(pca, ncp = 30, addlabels = TRUE)
options(repr.plot.width = 10, repr.plot.height = 10, repr.plot.res = 100)
fviz_pca_var(pca, select.var = list(contrib = 20))
fviz_pca_ind(pca, col.ind="cos2")
# pred <- predict(pca, newdata=tt)
# expl.var <- round(pca$sdev^2/sum(pca$sdev^2)*100) # percent explained variance
###Plot result
# pc = c(1,2)
# COLOR <- c(1:6)
# PCH <- c(1,16)
# # png("pca_pred.png", units="in", width=5, height=4, res=200)
# op <- par(mar=c(4,4,1,1), ps=10)
# plot(pca$x[,pc], col=COLOR[labels_cm$phenotype], cex=PCH[1],
#  xlab=paste0("PC ", pc[1], " (", expl.var[pc[1]], "%)"),
#  ylab=paste0("PC ", pc[2], " (", expl.var[pc[2]], "%)")
# )
# points(pred[,pc], col=COLOR[labels_t$phenotype], cex=PCH[2])
# legend("topright", legend=levels(labels$phenotype), fill = COLOR, border=COLOR)
# legend("topleft", legend=c("training data", "validation data"), col=1, pch=PCH)
# par(op)
# dev.off()
x_pca <- t(pca$x)
x_pca <- x_pca[1:10,]
# t_pca <- t(pred)[1:10,]
# data <- '../data/CCLE_Minna_Thomas_COMBAT_vargenes.csv'
data <- '/Users/smgroves/Dropbox (VU Basic Sciences)/SCLC_data/RNAseq/gdsc_minna_ccle/SCLC_combined_Minna_CCLE_batch_corrected_vargenes-no-NKX2.csv'
x <- read.csv(data, header = TRUE, sep = ',', row.names = 1)
drops <- c("t.S02353","t.S02297") #these are the two chromothripsis cases that are very different from the rest of the data points
x <- x[,!(names(x) %in% drops)]
#
# cm <- x[,!grepl("^t",colnames(x))]
# t <- x[,!grepl("^[cm]",colnames(x))]
# t <- expm1(t)
# tt <- transpose(t)
# rownames(tt) <- colnames(t)
# colnames(tt) <- rownames(t)
#
# x <- cm
# x<- expm1(x)
xt <- transpose(x)
rownames(xt) <- colnames(x)
colnames(xt) <- rownames(x)
data_labels <-'/Users/smgroves/Dropbox (VU Basic Sciences)/SCLC_data/RNAseq/gdsc_minna_ccle/combined_clusters_2020-05-27-MC.csv'
# data_labels <-'../data/combined_clusters.csv'
labels <- read.csv(data_labels, header = TRUE, sep = ',', row.names = 1)
labels <- labels[row.names(xt),]
labels_cm <- labels[row.names(xt),]
labels_t <- labels[row.names(tt),]
pca <- prcomp(xt, center=TRUE, scale = TRUE)
# eig.val <- get_eigenvalue(pca)
# res.var <- get_pca_var(pca)
# res.var$contrib        # Contributions to the PCs
res.ind <- get_pca_ind(pca)
par(bg = "white")
# autoplot(pca) + theme_bw()
autoplot(pca, data = labels, colour = 'subtype') +theme_bw()
options(repr.plot.width = 15, repr.plot.height = 6, repr.plot.res = 100)
fviz_eig(pca, ncp = 30, addlabels = TRUE)
options(repr.plot.width = 10, repr.plot.height = 10, repr.plot.res = 100)
fviz_pca_var(pca, select.var = list(contrib = 20))
fviz_pca_ind(pca, col.ind="cos2")
# pred <- predict(pca, newdata=tt)
# expl.var <- round(pca$sdev^2/sum(pca$sdev^2)*100) # percent explained variance
###Plot result
# pc = c(1,2)
# COLOR <- c(1:6)
# PCH <- c(1,16)
# # png("pca_pred.png", units="in", width=5, height=4, res=200)
# op <- par(mar=c(4,4,1,1), ps=10)
# plot(pca$x[,pc], col=COLOR[labels_cm$phenotype], cex=PCH[1],
#  xlab=paste0("PC ", pc[1], " (", expl.var[pc[1]], "%)"),
#  ylab=paste0("PC ", pc[2], " (", expl.var[pc[2]], "%)")
# )
# points(pred[,pc], col=COLOR[labels_t$phenotype], cex=PCH[2])
# legend("topright", legend=levels(labels$phenotype), fill = COLOR, border=COLOR)
# legend("topleft", legend=c("training data", "validation data"), col=1, pch=PCH)
# par(op)
# dev.off()
x_pca <- t(pca$x)
x_pca <- x_pca[1:10,]
# t_pca <- t(pred)[1:10,]
arc_rob = fit_pch_bootstrap(x_pca, n = 200, sample_prop = .8, seed = 2543, delta = 0,
noc = 5)
# arc_rob1 = fit_pch_bootstrap(x_pca, n = 200, sample_prop = .8, seed = 2543, delta = 1,
# noc = 5)
# arc_rob5 = fit_pch_bootstrap(x_pca, n = 200, sample_prop = .8, seed = 2543, delta = 5,
# noc = 5)
arc_ave <- average_pch_fits(arc_rob)
# arc_ave1 <- average_pch_fits(arc_rob1)
# arc_ave5 <- average_pch_fits(arc_rob5)
#
# for (i in (0:8)){
#   arc_rob_mult = fit_pch_bootstrap(x_pca, n = 200, sample_prop = .8, seed = 2543, delta = i,
#                             noc = 5)
#   arc_ave_mult <- average_pch_fits(arc_rob_mult)
#   print(i)
#   print(arc_rob_mult)
#   print(arc_ave_mult)
#
# }
arc<- fit_pch(x_pca, volume_ratio = 't_ratio',noc = 5)
# clusters = fit_pch(x_pca, noc = 5, method = "kmeans")
# plot_arc(arc_data = clusters, data = x_pca,
# which_dimensions = 1:2,
# data_lab = as.character(apply(clusters$S, 2, which.max))) +
# ylim(-18, 17) + ggtitle("K-means clusters") + theme_bw()
#
# p_pca = plot_arc(arc_data = arc_rob, data = t_pca,
#                  which_dimensions = 1:3, line_size = 1.5,
#                  data_lab = as.numeric(t["ASCL1",]),
#                  text_size = 60, data_size = 6)
# plotly::layout(p_pca, title = "ASCL1")
p_pca = plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
arc_rob
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
cols <- c(brewer.pal(7, "Set1"),'gray')
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
cols <- c(brewer.pal(7, "Set1"),'gray')
p_pca = plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
# cols <- c(brewer.pal(7, "Set1"),'gray')
cols <- c('green','red','blue',"orange",'purple','grey')
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:2, colors = cols,
data_lab = as.character(labels$subtype)) + theme_bw()
#
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
# cols <- c(brewer.pal(7, "Set1"),'gray')
cols <- c('green','red','blue',"orange",'lightgrey','purple','grey')
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
# cols <- c(brewer.pal(7, "Set1"),'gray')
cols <- c('green','red','blue',"orange",'grey','purple','grey')
p_pca = plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
# cols <- c(brewer.pal(7, "Set1"),'gray')
cols <- c('green','red','blue',"orange",'grey','purple','grey')
p_pca = plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
# cols <- c(brewer.pal(7, "Set1"),'gray')
cols <- c('green','red','blue',"orange",'grey','purple','black')
p_pca = plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
# cols <- c(brewer.pal(7, "Set1"),'gray')
cols <- c('blue','purple','green',"red",'orange','grey','black')
p_pca = plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
options(repr.plot.width = 7, repr.plot.height = 6, repr.plot.res = 100)
# cols <- c(brewer.pal(7, "Set1"),'gray')
cols <- c('blue','purple','green',"red",'orange','grey','black')
p_pca = plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:2, colors = cols,
data_lab = as.character(labels$subtype)) + theme_bw()
#
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:2, colors = cols,
data_lab = as.character(labels$subtype)) + theme_bw()
#
plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:2, colors = cols,
data_lab = as.character(labels$subtype))
cols <- c('red','blue','green',"purple",'grey','orange','black')
plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:2, colors = cols,
data_lab = as.character(labels$subtype))
cols <- c(brewer.pal(7, "Set1"),'gray')
plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:2, colors = cols,
data_lab = as.character(labels$subtype))
cols <- c(brewer.pal(6, "Set1"),'gray')
plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:2, colors = cols,
data_lab = as.character(labels$subtype))
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
p_pca = plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:3, line_size = 1.5, colors = cols,
data_lab = as.character(labels$subtype),
text_size = 60, data_size = 6)
plotly::layout(p_pca, title = "Phenotype")
plot_arc(arc_data = arc_rob, data = x_pca,
which_dimensions = 1:2, colors = cols,
data_lab = as.character(labels$subtype))
# install.packages('reticulate')
reticulate::use_condaenv("reticulate_PCHA", conda = "auto",
required = TRUE) # set TRUE to force R to use reticulate_PCHA
reticulate::py_discover_config("py_pcha")
# install.packages("BiocManager")
# BiocManager::install("vitkl/ParetoTI", dependencies = c("Depends", "Imports", "LinkingTo"))
library(cowplot)
library(ParetoTI)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(factoextra)
library(ggfortify)
library(cluster)
set.seed(4355)
# data <- '../data/CCLE_Minna_Thomas_COMBAT_vargenes.csv'
# data <- '/Users/smgroves/Dropbox (VU Basic Sciences)/SCLC_data/RNAseq/gdsc_minna_ccle/SCLC_CCLE_Minna_RNA-seq_batch-corrected_geneexp.csv'
data <- '../data/SCLC_combined_Minna_CCLE_batch_corrected_wo_lowgenes.csv'
x <- read.csv(data, header = TRUE, sep = ',', row.names = 1)
# drops <- c("t.S02353","t.S02297") #these are the two chromothripsis cases that are very different from the rest of the data points
# x <- x[,!(names(x) %in% drops)]
#
# cm <- x[,!grepl("^t",colnames(x))]
# t <- x[,!grepl("^[cm]",colnames(x))]
# t <- expm1(t)
# tt <- transpose(t)
# rownames(tt) <- colnames(t)
# colnames(tt) <- rownames(t)
#
# x <- cm
# x<- expm1(x)
xt <- transpose(x)
rownames(xt) <- colnames(x)
colnames(xt) <- rownames(x)
# data_labels <-'/Users/smgroves/Documents/MATLAB/particode/Data/combined_clusters_2020-05-27-MC.csv'
data_labels <-'/Users/smgroves/Documents/MATLAB/particode/Data/combined_clusters_2020-05-27-MC copy.csv'
# data_labels <-'../data/combined_clusters.csv'
labels <- read.csv(data_labels, header = TRUE, sep = ',', row.names = 1)
labels <- labels[row.names(xt),]
# labels_cm <- labels[row.names(xt),]
# labels_t <- labels[row.names(tt),]
## Dunn Index
# install.packages("clValid")
df2 <- xt[sample(nrow(xt),replace = TRUE),sample(ncol(xt), replace = TRUE)]
library(clValid)
intern <- clValid(df2, 2:6, clMethods=c("hierarchical","kmeans","pam"),
validation="internal")
summary(intern)
optimalScores(intern)
plot(intern)
library(reticulate)
reticulate::use_condaenv("/Users/smgroves/Documents/anaconda3/envs/mazebox_env", conda = "auto", required = TRUE) # set TRUE to force R to use reticulate_PCHA
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("sva")
# install.packages("devtools")
# devtools::install_local("/Users/smgroves/Downloads/CytoTRACE-master.zip")
library(CytoTRACE)
library(reticulate)
reticulate::use_condaenv("/Users/smgroves/Documents/anaconda3/envs/mazebox_env", conda = "auto", required = TRUE) # set TRUE to force R to use reticulate_PCHA
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("sva")
install.packages("devtools")
devtools::install_local("/Users/smgroves/Downloads/CytoTRACE-master.zip")
install.packages("devtools")
library(reticulate)
reticulate::use_condaenv("/Users/smgroves/Documents/anaconda3/envs/mazebox_env", conda = "auto", required = TRUE) # set TRUE to force R to use reticulate_PCHA
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("sva")
install.packages("devtools")
devtools::install_local("/Users/smgroves/Downloads/CytoTRACE-master.zip")
library(CytoTRACE)
# BiocManager::install("sva")
# install.packages("devtools")
devtools::install_local("/Users/smgroves/Downloads/CytoTRACE-master.zip")
library(reticulate)
reticulate::use_condaenv("/Users/smgroves/Documents/anaconda3/envs/mazebox_env", conda = "auto", required = TRUE) # set TRUE to force R to use reticulate_PCHA
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("sva")
# install.packages("devtools")
# devtools::install_local("/Users/smgroves/Downloads/CytoTRACE-master.zip")
library(CytoTRACE)
library(reticulate)
reticulate::use_condaenv("/Users/smgroves/Documents/anaconda3/envs/mazebox_env", conda = "auto", required = TRUE) # set TRUE to force R to use reticulate_PCHA
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("sva")
# install.packages("devtools")
# devtools::install_local("/Users/smgroves/Downloads/CytoTRACE-master.zip")
# library(CytoTRACE)
# BiocManager::install("scater")
library(scater)
# install loomR from GitHub using the remotes package
# remotes::install_github(repo ='mojaveazure/loomR', ref = 'develop')
library(loomR)
library(reticulate)
reticulate::use_condaenv("/Users/smgroves/Documents/anaconda3/envs/mazebox_env", conda = "auto", required = TRUE) # set TRUE to force R to use reticulate_PCHA
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install("sva")
# install.packages("devtools")
# devtools::install_local("/Users/smgroves/Downloads/CytoTRACE-master.zip")
# library(CytoTRACE)
# BiocManager::install("scater")
library(scater)
# install loomR from GitHub using the remotes package
remotes::install_github(repo ='mojaveazure/loomR', ref = 'develop')
library(loomR)
# install.packages('Seurat')
library(Seurat)
data <- ReadH5AD(file = "../../out/cell-lines/X_magic_02.h5ad") #data was generated in python
data <- loomR::ReadH5AD(file = "../../out/cell-lines/X_magic_02.h5ad") #data was generated in python
data <- Seurat::ReadH5AD(file = "../../out/cell-lines/X_magic_02.h5ad") #data was generated in python
remotes::install_github("mojaveazure/seurat-disk")
library(SeuratData)
library(SeuratDisk)
file = "../../out/cell-lines/X_magic_02.h5ad"
Convert(file, dest = "h5seurat", overwrite = TRUE)
file = "../../out/cell-lines/X_magic_for_R.h5ad"
Convert(file, dest = "h5seurat", overwrite = TRUE)
data <- LoadH5Seurat("../../out/cell-lines/X_magic_for_R.h5seurat")
Convert(file, dest = "h5seurat", overwrite = TRUE)
data <- LoadH5Seurat("../../out/cell-lines/X_magic_for_R.h5seurat")
