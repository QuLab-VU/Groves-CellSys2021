# library(SeuratData)
library(SeuratDisk)
file = "../../out/cell-lines/X_magic_no_doublets_for_R.h5ad"
Convert(file, dest = "h5seurat", overwrite = TRUE)
data <- LoadH5Seurat("../../out/cell-lines/X_magic_no_doublets_for_R.h5seurat")
Idents(data) = data@meta.data$cline
ElbowPlot(data) #this plot indicates  the top 8 are important
DimPlot(data, reduction = "pca", label = TRUE)
pct <- data[["pca"]]@stdev / sum(data[["pca"]]@stdev) * 100
# Calculate cumulative percents for each PC
cumu <- cumsum(pct)
# Determine which PC exhibits cumulative percent greater than 90% and % variation associated with the PC is less than 5
co1 <- which(cumu > 90 & pct < 5)[1]
print(co1) #38
# Determine the difference between variation of PC and subsequent PC
co2 <- sort(which((pct[1:length(pct) - 1] - pct[2:length(pct)]) > 0.1), decreasing = T)[1] + 1
# last point where change of % of variation is more than 0.1%.
print(co2) #11
data <- FindNeighbors(data, dims = 1:10)
data <- FindClusters(data, resolution = 0.5)
data <- RunUMAP(data, dims = 1:10)
DimPlot(data, reduction = "umap")
# install.packages('plotly')
# Load plot_ly
library(plotly)
# Extract tSNE information from Seurat Object
pca_1 <- data[["pca"]]@cell.embeddings[,1]
pca_2 <- data[["pca"]]@cell.embeddings[,2]
pca_3 <- data[["pca"]]@cell.embeddings[,3]
# Visualize what headings are called so that you can extract them to form a dataframe
# Embeddings(object = data, reduction = "pca")
plot.data <- FetchData(object = data, vars = c("PC_1", "PC_2", "PC_3", "cline"))
plot.data$label <- paste(rownames(plot.data))
plot_ly(data = plot.data,
x = ~PC_1, y = ~PC_2, z = ~PC_3,
color = ~cline,
colors = c("lightseagreen",
"green",
"red",
"orange1",
"royalblue1",
"lightcyan3",
"peachpuff3",
"darkorchid1",
"turquoise",
"darkmagenta"),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, width=2), # controls size of points
text=~label, #This is that extra column we made earlier for which we will use for cell ID
hoverinfo="text") #When you visualize your plotly object, hovering your mouse pointer over a point shows cell names
VizDimLoadings(data, dims = 1:3, reduction = "pca")
save(data, file="../../out/cell-lines/ParetoTI/X_magic_for_ParetoTI.Robj")
write.csv(data[["RNA"]]@scale.data, '../../out/cell-lines/ParetoTI/integrated-corrected-data.csv')
write.csv(data[['pca']]@cell.embeddings, '../../out/cell-lines/ParetoTI/pca_embedding.csv')
write.csv(data[['pca']]@feature.loadings, '../../out/cell-lines/ParetoTI/pca_feature_loadings.csv')
data <- ProjectDim(data, reduction = 'pca')
write.csv(data[['pca']]@feature.loadings.projected, '../../out/cell-lines/ParetoTI/pca_feature_loadings_projected.csv')
# devtools::install_github(repo = 'hhoeflin/hdf5r')
# devtools::install_github(repo = 'mojaveazure/loomR', ref = 'develop')
# devtools::install_github(repo = 'satijalab/seurat', ref = 'loom')
# library(loomR)
#
# data.loom <- as.loom(data, filename = "X_magic_for_ParetoTI.loom", verbose = FALSE)
library(ParetoTI)
library(cowplot)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(factoextra)
library(ggfortify)
library(cluster)
# install.packages("data.table")
##################################
# load(file="../../out/cell-lines/ParetoTI/X_magic_for_ParetoTI.Robj")
top_pcs = 11
x <- data[["RNA"]]@scale.data
x_pca <- read.csv('../../out/cell-lines/ParetoTI/pca_embedding.csv',header = TRUE,row.names = 1)
x_pca <- t(x_pca)
x_pca <- x_pca[1:top_pcs,] #keep only top 11 PCs
loadings<- read.csv('../../out/cell-lines/ParetoTI/pca_feature_loadings.csv', header = TRUE, row.names = 1)
loadings <- as.matrix(loadings)
arc_ks = k_fit_pch(x_pca, ks = 2:8, check_installed = T,
bootstrap = T, bootstrap_N = 200, maxiter = 1000,
bootstrap_type = "m", seed = 2543,
volume_ratio = "t_ratio", # set to "none" if too slow
delta=0, conv_crit = 1e-04, order_type = "align",
sample_prop = 0.75)
save(arc_ks, file="../../out/cell-lines/ParetoTI/arc_ks.Robj")
# load(file="../../out/cell-lines/ParetoTI/arc_ks.Robj")
# Show variance explained by a polytope with each k (cumulative)
plot_arc_var(arc_ks, type = "varexpl", point_size = 2, line_size = 1.5) + theme_bw()
plot_arc_var(arc_ks, type = "res_varexpl", point_size = 2, line_size = 1.5) + theme_bw()
plot_arc_var(arc_ks, type = "total_var", point_size = 2, line_size = 1.5) +
theme_bw() +
ylab("Mean variance in position of vertices")
plot_arc_var(arc_ks, type = "t_ratio", point_size = 2, line_size = 1.5) + theme_bw()
i = 6
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
print(pch_rand)
#    k  var_name   var_obs p_value
# 1: 3   varexpl 0.4309729   0.001
# 2: 3   t_ratio 0.5023466   0.001
# 3: 3 total_var        NA     NaN
# ---
#   k  var_name   var_obs p_value
# 1: 4   varexpl 0.5727041   0.001
# 2: 4   t_ratio 0.2134559   0.003
# 3: 4 total_var        NA     NaN
# ---
#    k  var_name   var_obs p_value
# 1: 5   varexpl 0.6979477   0.001
# 2: 5   t_ratio 0.1492318   0.001
# 3: 5 total_var        NA     NaN
# ---
#    k  var_name   var_obs p_value
# 1: 6   varexpl 0.8313096   0.001
# 2: 6   t_ratio 0.2436056   0.001
# 3: 6 total_var        NA     NaN
pch_rand
i = 5
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
pch_rand
#    k  var_name   var_obs p_value
# 1: 3   varexpl 0.4309729   0.001
# 2: 3   t_ratio 0.5023466   0.001
# 3: 3 total_var        NA     NaN
# ---
#   k  var_name   var_obs p_value
# 1: 4   varexpl 0.5727041   0.001
# 2: 4   t_ratio 0.2134559   0.003
# 3: 4 total_var        NA     NaN
# ---
#    k  var_name   var_obs p_value
# 1: 5   varexpl 0.6979477   0.001
# 2: 5   t_ratio 0.1492318   0.001
# 3: 5 total_var        NA     NaN
# ---
#    k  var_name   var_obs p_value
# 1: 6   varexpl 0.8313096   0.001
# 2: 6   t_ratio 0.2436056   0.001
# 3: 6 total_var        NA     NaN
#>>>>
#    k  var_name    var_obs p_value
# 1: 6   varexpl 0.79494256   0.001
# 2: 6   t_ratio 0.00118854   0.940
# 3: 6 total_var         NA     NaN
pch_rand
pch_rand$rand_dist
pch_rand$obs_dist
i = 4
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#    k  var_name   var_obs p_value
# 1: 3   varexpl 0.4309729   0.001
# 2: 3   t_ratio 0.5023466   0.001
# 3: 3 total_var        NA     NaN
# ---
#   k  var_name   var_obs p_value
# 1: 4   varexpl 0.5727041   0.001
# 2: 4   t_ratio 0.2134559   0.003
# 3: 4 total_var        NA     NaN
# ---
#    k  var_name   var_obs p_value
# 1: 5   varexpl 0.6979477   0.001
# 2: 5   t_ratio 0.1492318   0.001
# 3: 5 total_var        NA     NaN
# ---
#    k  var_name   var_obs p_value
# 1: 6   varexpl 0.8313096   0.001
# 2: 6   t_ratio 0.2436056   0.001
# 3: 6 total_var        NA     NaN
#>>>>
#  k  var_name     var_obs p_value
# 1: 5   varexpl 0.658334356   0.999
# 2: 5   t_ratio 0.001747596   0.999
# 3: 5 total_var          NA     NaN
#    k  var_name    var_obs p_value
# 1: 6   varexpl 0.79494256   0.001
# 2: 6   t_ratio 0.00118854   0.940
# 3: 6 total_var         NA     NaN
pch_rand
i = 3
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#    k  var_name   var_obs p_value
# 1: 3   varexpl 0.4309729   0.001
# 2: 3   t_ratio 0.5023466   0.001
# 3: 3 total_var        NA     NaN
# ---
#   k  var_name   var_obs p_value
# 1: 4   varexpl 0.5727041   0.001
# 2: 4   t_ratio 0.2134559   0.003
# 3: 4 total_var        NA     NaN
# ---
#    k  var_name   var_obs p_value
# 1: 5   varexpl 0.6979477   0.001
# 2: 5   t_ratio 0.1492318   0.001
# 3: 5 total_var        NA     NaN
# ---
#    k  var_name   var_obs p_value
# 1: 6   varexpl 0.8313096   0.001
# 2: 6   t_ratio 0.2436056   0.001
# 3: 6 total_var        NA     NaN
#>>>>
#   k  var_name   var_obs p_value
# 1: 4   varexpl 0.6506325   0.001
# 2: 4   t_ratio 0.3747311   0.001
# 3: 4 total_var        NA     NaN
#  k  var_name     var_obs p_value
# 1: 5   varexpl 0.658334356   0.999
# 2: 5   t_ratio 0.001747596   0.999
# 3: 5 total_var          NA     NaN
#    k  var_name    var_obs p_value
# 1: 6   varexpl 0.79494256   0.001
# 2: 6   t_ratio 0.00118854   0.940
# 3: 6 total_var         NA     NaN
pch_rand
arc <- fit_pch(x_pca, noc = 4, delta = 0, conv_crit = 1e-04, maxiter = 500)
##################################
# Fit 6 archetypes with bootstrapping for robustness
arc_rob = fit_pch_bootstrap(x_pca, n = 200, sample_prop = .8, seed = 2543, delta = 1,
noc = 6)
arc_ave <- average_pch_fits(arc_rob)
save(arc, file="../../out/cell-lines/ParetoTI/arc.Robj")
save(arc_rob, file="../../out/cell-lines/ParetoTI/arc_rob.Robj")
save(arc_ave, file="../../out/cell-lines/ParetoTI/arc_ave.Robj")
write.csv(arc$XC, file="../../out/cell-lines/ParetoTI/arc_positions_pca.csv")
write.csv(arc_ave$XC, file="../../out/cell-lines/ParetoTI/arc_ave_positions_pca.csv")
reconstruct_from_pca <- function(x, loadings, arc_XC, nComp = 11){
mu = colMeans(t(x)) #mean for each feature (gene)
# Xhat = [r(samples) x c(PCs)] %*% [r(PCs) x c(Features)]
# Xhat = [r(samples) x c(features)]
Xhat = arc_XC[,1:nComp] %*% t(loadings[,1:nComp])
Xhat = scale(Xhat, center = -mu, scale = FALSE)
return(Xhat)}
x_recon <- reconstruct_from_pca(x, loadings, x_pca)
arc_genespace <- reconstruct_from_pca(x = x, loadings = loadings, arc_XC = t(arc_ave$XC))
write.csv(t(arc_genespace), '../../out/cell-lines/ParetoTI/arc_gene-space.csv')
##################################
#
# load(file="../int/single-cell/arc.Robj")
# load( file="../int/single-cell/arc_rob.Robj")
# load( file="../int/single-cell/arc_ave.Robj")
Idents(object = data) <- data@meta.data$cline #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/robust_archetypes.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@scale.data['NEUROD2',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of NEUROD2 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/NEUROD2.HTML")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['YAP1',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of YAP1 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/YAP1.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['POU2F3',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of POU2F3 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/POU2F3.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['ASCL1',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of ASCL1 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/ASCL1.html")
arc_6 <- fit_pch(x_pca, noc = 6, delta = 0, conv_crit = 1e-04, maxiter = 500)
Idents(object = data) <- data@meta.data$cline #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc_6, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc_6, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
knitr::opts_chunk$set(echo = TRUE)
# BiocManager::install(c('fdrtool','ade4','rgl'))
library(fdrtool)
library(ade4)
# library(rgl)
library(ggrepel)
library(stringr)
# BiocManager::install('tidyverse')
library(tidyverse)
library(forcats)
## Import archetype color scheme
# source("../ParTI-code/hallmarkOmeter.inc.R")
##################################################
## Make matrix of tissue archetypes vs super-archetypes
# Read in significant enrichment for "Super Archetypes" (CMT data)
SAMSig <- read.csv("../ParTI-code/combined-data/out/5/100473_continuous_significant.csv")
SAMSig <- SAMSig %>% dplyr::filter(Mean.Difference > 0.1)
# # This makes a list of all of the archetypes (# and p value) for each dataset, and makes a list of files, one enrichment file per dataset. This is unnecessary for us to do
# cancerIDs <-
#     read_tsv("../TCGA_frac_nArchs.tab", col_names=F) %>% .[,1] %>%
#     unlist %>% as.character %>%
#     setdiff(c("HNSC", "LUAD", "BRCA"))
# arcsMSigFiles <-
#     c(paste("../", cancerIDs,
#             "_UCSC/MSigDBenrichment_continuous_significant.csv",
#             sep=""),
#       "~/work/cancerTaskAtlas/brca_metabric/MSigDBenrichment_continuous_significant.csv")
# cancerIDs <- c(cancerIDs, "BRCA")
# cbind(cancerIDs, arcsMSigFiles)
arcsMSig <-read.csv('../ParTI-code/human-cell-lines/out/5/322234/322234_continuous_significant.csv') %>%
dplyr::filter(Mean.Difference > 0.1)
featsUniv <- dplyr::union(SAMSig %>% dplyr::select("Feature.Name"),
arcsMSig %>% dplyr::select("Feature.Name"))
arcIdx <- 1;
SAmapping <- # iterate over tissue archetypes
map(unlist(arcsMSig %>% dplyr::select(archetype..) %>% unique), function(arcIdx) {
SAidx <- 1;
arcScores <- # iterate over super-archetypes
map(unlist(SAMSig %>% dplyr::select(archetype..) %>% unique),
function(SAidx) {
SAfeats <- SAMSig %>%
dplyr::filter(archetype.. == SAidx) %>%
dplyr::select(Feature.Name)
arcFeats <- arcsMSig %>%
dplyr::filter(archetype.. == arcIdx) %>%
dplyr::select(Feature.Name)
## nrow(SAfeats)
## nrow(arcFeats)
expIntersect <- nrow(SAfeats) * nrow(arcFeats) / nrow(featsUniv)
## phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)
## q,x: number of white balls drawn without
## replacement from an urn which contains
## both black and white balls.
## m: the number of white balls in the urn.
## n: the number of black balls in the urn.
## k: the number of balls drawn from the urn.
p <- phyper(q=intersect(SAfeats, arcFeats) %>% nrow,
m=SAfeats %>% nrow,
n=nrow(featsUniv) - nrow(SAfeats),
k=arcFeats %>% nrow,
lower.tail=F)
foldEnrich <- nrow(intersect(SAfeats, arcFeats)) / expIntersect;
## Bonferroni
cutOff <- .01 /
((arcsMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow) *
(SAMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow))
return(c("obs"=nrow(intersect(SAfeats, arcFeats)),
"exp"=expIntersect,
"p"=p,
"isSignif"=p<cutOff))
})
arcScoresT <-
sapply(arcScores, function(x) { x }) %>% t %>% as.data.frame %>%
rownames_to_column() %>%
mutate(tissueArch=arcIdx) %>%
rename("univArch"=rowname)
return(arcScoresT)
})
# save.image("~/Documents/Github/Groves-CellSys2021/notebooks/ParTI-code/SAmapping.RData")
# load("/Users/smgroves/Documents/Github/Groves-CellSys2021/notebooks/ParTI-code/SAmapping.RData")
View(SAmapping)
arc <- fit_pch(x_pca, noc = 4, delta = 0, conv_crit = 1e-04, maxiter = 500)
##################################
# Fit 6 archetypes with bootstrapping for robustness
arc_rob = fit_pch_bootstrap(x_pca, n = 200, sample_prop = .8, seed = 2543, delta = 1,
noc = 4)
arc_ave <- average_pch_fits(arc_rob)
save(arc, file="../../out/cell-lines/ParetoTI/arc.Robj")
save(arc_rob, file="../../out/cell-lines/ParetoTI/arc_rob.Robj")
save(arc_ave, file="../../out/cell-lines/ParetoTI/arc_ave.Robj")
write.csv(arc$XC, file="../../out/cell-lines/ParetoTI/arc_positions_pca.csv")
write.csv(arc_ave$XC, file="../../out/cell-lines/ParetoTI/arc_ave_positions_pca.csv")
reconstruct_from_pca <- function(x, loadings, arc_XC, nComp = 11){
mu = colMeans(t(x)) #mean for each feature (gene)
# Xhat = [r(samples) x c(PCs)] %*% [r(PCs) x c(Features)]
# Xhat = [r(samples) x c(features)]
Xhat = arc_XC[,1:nComp] %*% t(loadings[,1:nComp])
Xhat = scale(Xhat, center = -mu, scale = FALSE)
return(Xhat)}
x_recon <- reconstruct_from_pca(x, loadings, x_pca)
arc_genespace <- reconstruct_from_pca(x = x, loadings = loadings, arc_XC = t(arc_ave$XC))
write.csv(t(arc_genespace), '../../out/cell-lines/ParetoTI/arc_gene-space.csv')
##################################
#
# load(file="../int/single-cell/arc.Robj")
# load( file="../int/single-cell/arc_rob.Robj")
# load( file="../int/single-cell/arc_ave.Robj")
Idents(object = data) <- data@meta.data$cline #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
arc_genespace <- reconstruct_from_pca(x = x, loadings = loadings, arc_XC = t(arc$XC))
write.csv(t(arc_genespace), '../../out/cell-lines/ParetoTI/arc_single-fit-gene-space.csv')
Idents(object = data) <- data@meta.data$cline #add cell line labels
cols <- c(brewer.pal(9, "Set1"),'gray')
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2,colors = cols,
data_lab = as.character(Idents(data))) + theme_bw()
p_pca = plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
colors = cols,
data_lab = as.character(Idents(data)),
text_size = 60, data_size = 2)
plotly::layout(p_pca, title = "Archetypes for Top 10 PCs")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/robust_archetypes.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@scale.data['NEUROD2',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of NEUROD2 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/NEUROD2.HTML")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['YAP1',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of YAP1 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/YAP1.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['POU2F3',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of POU2F3 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/POU2F3.html")
p_pca = plot_arc(arc_data = arc_ave, data = x_pca,
which_dimensions = 1:3, line_size = 1.5,
data_lab = as.numeric(data[['RNA']]@data['ASCL1',]),
text_size = 60, data_size = 3)
plotly::layout(p_pca, title = "Expression of ASCL1 in PCA")
htmlwidgets::saveWidget(p_pca, "../../figures/ParetoTI/ASCL1.html")
