library(tidyverse)
library(forcats)
## Import archetype color scheme
# source("../ParTI-code/hallmarkOmeter.inc.R")
##################################################
## Make matrix of tissue archetypes vs super-archetypes
# Read in significant enrichment for "Super Archetypes" (CMT data)
SAMSig <- read.csv("../ParTI-code/combined-data/out/5/100473_continuous_significant.csv")
SAMSig <- SAMSig %>% dplyr::filter(Mean.Difference > 0.1)
# # This makes a list of all of the archetypes (# and p value) for each dataset, and makes a list of files, one enrichment file per dataset. This is unnecessary for us to do
# cancerIDs <-
#     read_tsv("../TCGA_frac_nArchs.tab", col_names=F) %>% .[,1] %>%
#     unlist %>% as.character %>%
#     setdiff(c("HNSC", "LUAD", "BRCA"))
# arcsMSigFiles <-
#     c(paste("../", cancerIDs,
#             "_UCSC/MSigDBenrichment_continuous_significant.csv",
#             sep=""),
#       "~/work/cancerTaskAtlas/brca_metabric/MSigDBenrichment_continuous_significant.csv")
# cancerIDs <- c(cancerIDs, "BRCA")
# cbind(cancerIDs, arcsMSigFiles)
arcsMSig <-read.csv('../ParTI-code/human-cell-lines/out/5/322234/322234_continuous_significant.csv') %>%
dplyr::filter(Mean.Difference > 0.1)
featsUniv <- dplyr::union(SAMSig %>% dplyr::select("Feature.Name"),
arcsMSig %>% dplyr::select("Feature.Name"))
arcIdx <- 1;
SAmapping <- # iterate over tissue archetypes
map(unlist(arcsMSig %>% dplyr::select(archetype..) %>% unique), function(arcIdx) {
SAidx <- 1;
arcScores <- # iterate over super-archetypes
map(unlist(SAMSig %>% dplyr::select(archetype..) %>% unique),
function(SAidx) {
SAfeats <- SAMSig %>%
dplyr::filter(archetype.. == SAidx) %>%
dplyr::select(Feature.Name)
arcFeats <- arcsMSig %>%
dplyr::filter(archetype.. == arcIdx) %>%
dplyr::select(Feature.Name)
## nrow(SAfeats)
## nrow(arcFeats)
expIntersect <- nrow(SAfeats) * nrow(arcFeats) / nrow(featsUniv)
## phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)
## q,x: number of white balls drawn without
## replacement from an urn which contains
## both black and white balls.
## m: the number of white balls in the urn.
## n: the number of black balls in the urn.
## k: the number of balls drawn from the urn.
p <- phyper(q=intersect(SAfeats, arcFeats) %>% nrow,
m=SAfeats %>% nrow,
n=nrow(featsUniv) - nrow(SAfeats),
k=arcFeats %>% nrow,
lower.tail=F)
foldEnrich <- nrow(intersect(SAfeats, arcFeats)) / expIntersect;
## Bonferroni
cutOff <- .01 /
((arcsMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow) *
(SAMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow))
return(c("obs"=nrow(intersect(SAfeats, arcFeats)),
"exp"=expIntersect,
"p"=p,
"isSignif"=p<cutOff))
})
arcScoresT <-
sapply(arcScores, function(x) { x }) %>% t %>% as.data.frame %>%
rownames_to_column() %>%
mutate(tissueArch=arcIdx) %>%
rename("univArch"=rowname)
return(arcScoresT)
})
# save.image("~/Documents/Github/Groves-CellSys2021/notebooks/ParTI-code/SAmapping.RData")
# load("/Users/smgroves/Documents/Github/Groves-CellSys2021/notebooks/ParTI-code/SAmapping.RData")
View(SAmapping)
# Tumor vs Cell Line
SAMSig <-read.csv('../ParTI-code/thomas-tumors/out/5/') %>%
dplyr::filter(Mean.Difference > 0.1)
# Tumor vs Cell Line
SAMSig <-read.csv('../ParTI-code/thomas-tumors/out/5/538361_continuous_significant') %>%
dplyr::filter(Mean.Difference > 0.1)
# Tumor vs Cell Line
SAMSig <-read.csv('../ParTI-code/thomas-tumors/out/5/538361_continuous_significant.csv') %>%
dplyr::filter(Mean.Difference > 0.1)
featsUniv <- dplyr::union(SAMSig %>% dplyr::select("Feature.Name"),
arcsMSig %>% dplyr::select("Feature.Name"))
arcIdx <- 1;
SAmappingTumor <- # iterate over tissue archetypes
map(unlist(arcsMSig %>% dplyr::select(archetype..) %>% unique), function(arcIdx) {
SAidx <- 1;
arcScores <- # iterate over super-archetypes
map(unlist(SAMSig %>% dplyr::select(archetype..) %>% unique),
function(SAidx) {
SAfeats <- SAMSig %>%
dplyr::filter(archetype.. == SAidx) %>%
dplyr::select(Feature.Name)
arcFeats <- arcsMSig %>%
dplyr::filter(archetype.. == arcIdx) %>%
dplyr::select(Feature.Name)
## nrow(SAfeats)
## nrow(arcFeats)
expIntersect <- nrow(SAfeats) * nrow(arcFeats) / nrow(featsUniv)
## phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)
## q,x: number of white balls drawn without
## replacement from an urn which contains
## both black and white balls.
## m: the number of white balls in the urn.
## n: the number of black balls in the urn.
## k: the number of balls drawn from the urn.
p <- phyper(q=intersect(SAfeats, arcFeats) %>% nrow,
m=SAfeats %>% nrow,
n=nrow(featsUniv) - nrow(SAfeats),
k=arcFeats %>% nrow,
lower.tail=F)
foldEnrich <- nrow(intersect(SAfeats, arcFeats)) / expIntersect;
## Bonferroni
cutOff <- .01 /
((arcsMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow) *
(SAMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow))
return(c("obs"=nrow(intersect(SAfeats, arcFeats)),
"exp"=expIntersect,
"p"=p,
"isSignif"=p<cutOff))
})
arcScoresT <-
sapply(arcScores, function(x) { x }) %>% t %>% as.data.frame %>%
rownames_to_column() %>%
mutate(tissueArch=arcIdx) %>%
rename("univArch"=rowname)
return(arcScoresT)
})
View(SAmappingTumor)
# Tumor vs Cell Line
SAMSig <-read.csv('../ParTI-code/thomas-tumors/out/5/927196_continuous_significant.csv') %>%
dplyr::filter(Mean.Difference > 0.1)
featsUniv <- dplyr::union(SAMSig %>% dplyr::select("Feature.Name"),
arcsMSig %>% dplyr::select("Feature.Name"))
arcIdx <- 1;
SAmappingTumor <- # iterate over tissue archetypes
map(unlist(arcsMSig %>% dplyr::select(archetype..) %>% unique), function(arcIdx) {
SAidx <- 1;
arcScores <- # iterate over super-archetypes
map(unlist(SAMSig %>% dplyr::select(archetype..) %>% unique),
function(SAidx) {
SAfeats <- SAMSig %>%
dplyr::filter(archetype.. == SAidx) %>%
dplyr::select(Feature.Name)
arcFeats <- arcsMSig %>%
dplyr::filter(archetype.. == arcIdx) %>%
dplyr::select(Feature.Name)
## nrow(SAfeats)
## nrow(arcFeats)
expIntersect <- nrow(SAfeats) * nrow(arcFeats) / nrow(featsUniv)
## phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)
## q,x: number of white balls drawn without
## replacement from an urn which contains
## both black and white balls.
## m: the number of white balls in the urn.
## n: the number of black balls in the urn.
## k: the number of balls drawn from the urn.
p <- phyper(q=intersect(SAfeats, arcFeats) %>% nrow,
m=SAfeats %>% nrow,
n=nrow(featsUniv) - nrow(SAfeats),
k=arcFeats %>% nrow,
lower.tail=F)
foldEnrich <- nrow(intersect(SAfeats, arcFeats)) / expIntersect;
## Bonferroni
cutOff <- .01 /
((arcsMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow) *
(SAMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow))
return(c("obs"=nrow(intersect(SAfeats, arcFeats)),
"exp"=expIntersect,
"p"=p,
"isSignif"=p<cutOff))
})
arcScoresT <-
sapply(arcScores, function(x) { x }) %>% t %>% as.data.frame %>%
rownames_to_column() %>%
mutate(tissueArch=arcIdx) %>%
rename("univArch"=rowname)
return(arcScoresT)
})
View(SAmappingTumor)
library(reticulate)
reticulate::use_condaenv("/Users/smgroves/Documents/anaconda3/envs/mazebox_env", conda = "auto", required = TRUE) # set TRUE to force R to use reticulate_PCHA
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(ParetoTI)
library(cowplot)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(factoextra)
library(ggfortify)
library(cluster)
# install.packages("data.table")
##################################
# load(file="../../out/cell-lines/ParetoTI/X_magic_for_ParetoTI.Robj")
top_pcs = 11
x_pca <- read.csv('../../data/single-cell-rna-seq/PNECs/magic_pca.csv',header = TRUE,row.names = 1)
x_pca <- t(x_pca)
# x_pca <- x_pca[1:top_pcs,] #keep only top 11 PCs
View(x_pca)
arc_ks = k_fit_pch(x_pca, ks = 2:8, check_installed = T,
bootstrap = T, bootstrap_N = 200, maxiter = 1000,
bootstrap_type = "m", seed = 2543,
volume_ratio = "t_ratio", # set to "none" if too slow
delta=0, conv_crit = 1e-04, order_type = "align",
sample_prop = 0.75)
# Show variance explained by a polytope with each k (cumulative)
plot_arc_var(arc_ks, type = "varexpl", point_size = 2, line_size = 1.5) + theme_bw()
plot_arc_var(arc_ks, type = "res_varexpl", point_size = 2, line_size = 1.5) + theme_bw()
plot_arc_var(arc_ks, type = "total_var", point_size = 2, line_size = 1.5) +
theme_bw() +
ylab("Mean variance in position of vertices")
plot_arc_var(arc_ks, type = "t_ratio", point_size = 2, line_size = 1.5) + theme_bw()
i = 3
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('../../figures/ParetoTI/%s_t-ratio_test.pdf', i))
pdf(sprintf('./figures/ParetoTI/%s_t-ratio_test.pdf', i))
pdf(sprintf('./figures/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
pch_rand
i = 4
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('./figures/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#    k  var_name   var_obs     p_value
# 1: 3   varexpl 0.8944519 0.001006036
# 2: 3   t_ratio 0.6004021 0.001006036
# 3: 3 total_var        NA         NaN
pch_rand
arc <- fit_pch(x_pca, noc = 3, delta = 0, conv_crit = 1e-04, maxiter = 500)
##################################
# Fit 4 archetypes with bootstrapping for robustness
arc_rob = fit_pch_bootstrap(x_pca, n = 200, sample_prop = .8, seed = 2543, delta = 1,
noc = 3)
# arc_ave <- average_pch_fits(arc_rob)
# save(arc, file="../../out/cell-lines/ParetoTI/arc.Robj")
# save(arc_rob, file="../../out/cell-lines/ParetoTI/arc_rob.Robj")
# save(arc_ave, file="../../out/cell-lines/ParetoTI/arc_ave.Robj")
# write.csv(arc$XC, file="../../out/cell-lines/ParetoTI/arc_positions_pca.csv")
# write.csv(arc_ave$XC, file="../../out/cell-lines/ParetoTI/arc_ave_positions_pca.csv")
#
# reconstruct_from_pca <- function(x, loadings, arc_XC, nComp = 11){
#     mu = colMeans(t(x)) #mean for each feature (gene)
#     # Xhat = [r(samples) x c(PCs)] %*% [r(PCs) x c(Features)]
#     # Xhat = [r(samples) x c(features)]
#     Xhat = arc_XC[,1:nComp] %*% t(loadings[,1:nComp])
#     Xhat = scale(Xhat, center = -mu, scale = FALSE)
#     return(Xhat)}
# x_recon <- reconstruct_from_pca(x, loadings, x_pca)
# arc_genespace <- reconstruct_from_pca(x = x, loadings = loadings, arc_XC = t(arc_ave$XC))
# write.csv(t(arc_genespace), '../../out/cell-lines/ParetoTI/arc_gene-space.csv')
#
# arc_genespace <- reconstruct_from_pca(x = x, loadings = loadings, arc_XC = t(arc$XC))
# write.csv(t(arc_genespace), '../../out/cell-lines/ParetoTI/arc_single-fit-gene-space.csv')
##################################
#
# load(file="../int/single-cell/arc.Robj")
# load( file="../int/single-cell/arc_rob.Robj")
plot_arc(arc_data = arc, data = x_pca,
which_dimensions = 1:2) + theme_bw()
i = 5
arc <- fit_pch(x_pca, noc = i, delta = 0, conv_crit = 1e-04, maxiter = 500)
start = Sys.time()
pch_rand = randomise_fit_pch(x_pca, arc_data = arc,
n_rand = 1000,
replace = FALSE, bootstrap_N = NA,
volume_ratio = "t_ratio",
maxiter = 500, delta = 0, conv_crit = 1e-4,
type = "m", clust_options = list(cores = 3))
# use type m to run on a single machine or cloud
# type = "m", clust_options = list(cores = 3))
# use clustermq (type cmq) to run as jobs on a computing cluster (higher parallelisation)
# type = "cmq", clust_options = list(njobs = 10))
pdf(sprintf('./figures/%s_t-ratio_test.pdf', i))
plot.r_pch_fit(pch_rand, type = c("t_ratio"), nudge_y = 5)
dev.off()
# This analysis took:
print(Sys.time() - start)
#    k  var_name   var_obs     p_value
# 1: 3   varexpl 0.8944519 0.001006036
# 2: 3   t_ratio 0.6004021 0.001006036
# 3: 3 total_var        NA         NaN
#    k  var_name   var_obs     p_value
# 1: 4   varexpl 0.9339312 0.001003009
# 2: 4   t_ratio 0.2975490 0.001003009
# 3: 4 total_var        NA         NaN
pch_rand
arc_5 <- fit_pch(x_pca, noc = 5, delta = 0, conv_crit = 1e-04, maxiter = 500)
arc_5 <- fit_pch(x_pca, noc = 4, delta = 0, conv_crit = 1e-04, maxiter = 500)
plot_arc(arc_data = arc_5, data = x_pca) + theme_bw()
arc_5 <- fit_pch(x_pca, noc = 5, delta = 0, conv_crit = 1e-04, maxiter = 500)
plot_arc(arc_data = arc_5, data = x_pca) + theme_bw()
# x.orig <- as.matrix(data[['RNA']]@data)
#
# rownames(x.orig)<-gsub("-", ".", rownames(x.orig))
#
#
#
# ix <- which(rownames(x.orig) %in%c('1.Sep','10.Sep','11.Mar','11.Sep','2.Sep','3.Mar','3.Sep','4.Mar','4.Sep','5.Sep', '5.Mar','6.Sep','6.Mar','7.Sep','7.Mar','8.Sep','8.Mar','9.Sep','9.Mar','RP11-206L10.1'))
# ix <- which(rownames(x.orig) %in% c('7SK.1'))
# clean <- x.orig[-ix, ]
data =  read.csv('../../data/single-cell-rna-seq/PNECs/log_data.csv',header = TRUE,row.names = 1)
activ_pi = measure_activity(as.matrix(data), activity_method = 'pseudoinverse',# row names are assumed to be gene identifiers,
which = 'BP', return_as_matrix = F,
taxonomy_id = 9606, keytype = "ALIAS", #9606 is human, 10090 is mouse.
lower = 10, upper = 1000)
arc_ave <- average_pch_fits(arc_rob)
activ_pi = measure_activity(as.matrix(data), activity_method = 'pseudoinverse',# row names are assumed to be gene identifiers,
which = 'BP', return_as_matrix = F,
taxonomy_id = 10090, keytype = "ALIAS", #9606 is human, 10090 is mouse.
lower = 10, upper = 1000)
t(data
)
activ_pi = measure_activity(as.matrix(t(data)), activity_method = 'pseudoinverse',# row names are assumed to be gene identifiers,
which = 'BP', return_as_matrix = F,
taxonomy_id = 10090, keytype = "ALIAS", #9606 is human, 10090 is mouse.
lower = 10, upper = 1000)
library(matrixStats)
activ_pi = measure_activity(as.matrix(t(data)), activity_method = 'pseudoinverse',# row names are assumed to be gene identifiers,
which = 'BP', return_as_matrix = F,
taxonomy_id = 10090, keytype = "ALIAS", #9606 is human, 10090 is mouse.
lower = 10, upper = 1000)
# aucell_options =list(aucMaxRank =
# nrow(as.matrix(x.orig)) * 0.05, binary = F, nCores = 3, plotStats = TRUE))
save(activ_pi, file="../../data/single-cell-rna-seq/PNECs/activ_pi.Robj")
data_attr = merge_arch_dist(arc_data = arc_ave, data = x_pca,
feature_data = as.matrix(t(data)),
colData = activ_pi,
dist_metric = c("euclidean", "arch_weights")[1],
colData_id = "cells", rank = F)
View(data_attr)
View(activ_pi)
save(data_attr, file="../../data/single-cell-rna-seq/PNECs/data_attr.Robj")
enriched_genes = find_decreasing_wilcox(data_attr$data, data_attr$arc_col,
features = data_attr$features_col,
bin_prop = 0.05, method = "BioQC")
enriched_genes = find_decreasing_wilcox(data_attr$data, data_attr$arc_col,
features = data_attr$features_col,
bin_prop = 0.05, method = "BioQC")
write.csv(enriched_genes, '../../data/single-cell-rna-seq/PNECs/enriched-genes.csv')
enriched_sets = find_decreasing_wilcox(data_attr$data, data_attr$arc_col,
features = data_attr$colData_col,
bin_prop = 0.05, method = "BioQC")
write.csv(enriched_sets, '../../data/single-cell-rna-seq/PNECs/enriched_sets.csv')
View(enriched_genes)
labs = get_top_decreasing(summary_genes = enriched_genes, summary_sets = enriched_sets,
cutoff_genes = 0.05,cutoff_sets = 0.05,
cutoff_metric = "wilcoxon_p_val",
p.adjust.method = "fdr",
order_by = "mean_diff", order_decreasing = T)
# "x_name" --> "archetype #"
# "y_name" --> "Feature Name"
# "mean_diff" --> "Mean Difference"
# "p" --> "P value (Mann-Whitney)"
# subset to p < 0.05
# Feature names need to be capitalized and remove underscores
enriched_sets <- enriched_sets[enriched_sets$p < 0.05, ]
library(dplyr)
enriched_sets <- enriched_sets %>%
rename("archetype #" = x_name,
"Feature Name" = y_name,
"Mean Difference" = mean_diff,
"P value (Mann-Whitney)" = p)
enriched_sets$`Feature Name` <- gsub("_", " ", enriched_sets$`Feature Name`)
enriched_sets$`Feature Name` <- toupper(enriched_sets$`Feature Name`)
write.csv(enriched_sets, '../../data/single-cell-rna-seq/PNECs/single-cell-continuous_significant.csv')
knitr::opts_chunk$set(echo = TRUE)
# BiocManager::install(c('fdrtool','ade4','rgl'))
library(fdrtool)
library(ade4)
# library(rgl)
library(ggrepel)
library(stringr)
# BiocManager::install('tidyverse')
library(tidyverse)
library(forcats)
##################################################
## Make matrix of bulk archetypes vs single cell archetypes
# Read in significant enrichment for bulk archetypes
SAMSig <- read.csv("../../ParTI-code/human-cell-lines/out/5/322234/322234_continuous_significant.csv")
##################################################
## Make matrix of bulk archetypes vs single cell archetypes
# Read in significant enrichment for bulk archetypes
SAMSig <- read.csv("../ParTI-code/human-cell-lines/out/5/322234/322234_continuous_significant.csv")
SAMSig <- SAMSig %>% dplyr::filter(Mean.Difference > 0.1)
# # This makes a list of all of the archetypes (# and p value) for each dataset, and makes a list of files, one enrichment file per dataset. This is unnecessary for us to do
# cancerIDs <-
#     read_tsv("../TCGA_frac_nArchs.tab", col_names=F) %>% .[,1] %>%
#     unlist %>% as.character %>%
#     setdiff(c("HNSC", "LUAD", "BRCA"))
# arcsMSigFiles <-
#     c(paste("../", cancerIDs,
#             "_UCSC/MSigDBenrichment_continuous_significant.csv",
#             sep=""),
#       "~/work/cancerTaskAtlas/brca_metabric/MSigDBenrichment_continuous_significant.csv")
# cancerIDs <- c(cancerIDs, "BRCA")
# cbind(cancerIDs, arcsMSigFiles)
arcsMSig <-read.csv('../../data/single-cell-rna-seq/PNECs/single-cell-continuous_significant.csv') %>%
dplyr::filter(Mean.Difference > 0.1)
vector <-arcsMSig$Feature.Name
vector2 <- arcsMSig$Feature.Name
for(i in 1:length(vector)){
vector2[i] <- paste("GO",vector[i])
}
arcsMSig$Feature.Name <- vector2
featsUniv <- dplyr::union(SAMSig %>% dplyr::select("Feature.Name"),
arcsMSig %>% dplyr::select("Feature.Name"))
arcIdx <- 1;
SAmapping <- # iterate over tissue archetypes
map(unlist(arcsMSig %>% dplyr::select(archetype..) %>% unique), function(arcIdx) {
SAidx <- 1;
arcScores <- # iterate over bulk-archetypes
map(unlist(SAMSig %>% dplyr::select(archetype..) %>% unique),
function(SAidx) {
SAfeats <- SAMSig %>%
dplyr::filter(archetype.. == SAidx) %>%
dplyr::select(Feature.Name)
arcFeats <- arcsMSig %>%
dplyr::filter(archetype.. == arcIdx) %>%
dplyr::select(Feature.Name)
## nrow(SAfeats)
## nrow(arcFeats)
expIntersect <- nrow(SAfeats) * nrow(arcFeats) / nrow(featsUniv)
## phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)
## q,x: number of white balls drawn without
## replacement from an urn which contains
## both black and white balls.
## m: the number of white balls in the urn.
## n: the number of black balls in the urn.
## k: the number of balls drawn from the urn.
p <- phyper(q=intersect(SAfeats, arcFeats) %>% nrow,
m=SAfeats %>% nrow,
n=nrow(featsUniv) - nrow(SAfeats),
k=arcFeats %>% nrow,
lower.tail=F)
foldEnrich <- nrow(intersect(SAfeats, arcFeats)) / expIntersect;
## Bonferroni
cutOff <- .01 /
((arcsMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow) *
(SAMSig %>% dplyr::select(archetype..) %>%
unique %>% nrow))
return(c("obs"=nrow(intersect(SAfeats, arcFeats)),
"exp"=expIntersect,
"p"=p,
"isSignif"=p<cutOff))
})
arcScoresT <-
sapply(arcScores, function(x) { x }) %>% t %>% as.data.frame %>%
rownames_to_column() %>%
mutate(tissueArch=arcIdx) %>%
rename("univArch"=rowname)
return(arcScoresT)
})
save.image("~/Documents/Github/Groves-CellSys2021/notebooks/ParTI-code/SAmapping.RData")
# load("/Users/smgroves/Documents/Github/Groves-CellSys2021/notebooks/ParTI-code/SAmapping.RData")
View(SAMSig)
View(SAmapping)
data_attr5 = merge_arch_dist(arc_data = arc_5, data = x_pca,
feature_data = as.matrix(t(data)),
colData = activ_pi,
dist_metric = c("euclidean", "arch_weights")[1],
colData_id = "cells", rank = F)
save(data_attr, file="../../data/single-cell-rna-seq/PNECs/data_attr5.Robj")
enriched_genes = find_decreasing_wilcox(data_attr5$data, data_attr5$arc_col,
features = data_attr5$features_col,
bin_prop = 0.05, method = "BioQC")
write.csv(enriched_genes, '../../data/single-cell-rna-seq/PNECs/enriched-genes5.csv')
enriched_sets = find_decreasing_wilcox(data_attr5$data, data_attr5$arc_col,
features = data_attr5$colData_col,
bin_prop = 0.05, method = "BioQC")
write.csv(enriched_sets, '../../data/single-cell-rna-seq/PNECs/enriched_sets5.csv')
labs = get_top_decreasing(summary_genes = enriched_genes, summary_sets = enriched_sets,
cutoff_genes = 0.05,cutoff_sets = 0.05,
cutoff_metric = "wilcoxon_p_val",
p.adjust.method = "fdr",
order_by = "mean_diff", order_decreasing = T)
